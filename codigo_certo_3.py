# -*- coding: utf-8 -*-
"""Código Certo 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vYoTBneW0bGhyr_uXHiI_X5fInqr-1z4
"""

import numpy as np
import os

def load_data():
    input_path = 'C:\\Users\\gui02\\Downloads\\EP IA\\IA-main\\content\\X.npy'
    output_path = 'C:\\Users\\gui02\\Downloads\\EP IA\\IA-main\\content\\Y_classe.npy'

    input_data = np.load(input_path)
    output_data = np.load(output_path)

    input_data = input_data.reshape(input_data.shape[0], -1)

    return input_data, output_data

class MLP:
    def __init__(self, input_layer_size, hidden_layer_size, output_layer_size, learning_rate=0.01):
        self.hidden_layer_size = hidden_layer_size
        self.weights_input_to_hidden = np.random.uniform(-0.5, 0.5, [input_layer_size + 1, hidden_layer_size])
        self.weights_hidden_to_output = np.random.uniform(-0.5, 0.5, [hidden_layer_size + 1, output_layer_size])
        self.learning_rate = learning_rate

    def sigmoid(self, x):
        return 1 / (1 + np.exp(-x))

    def sigmoid_derivative(self, x):
        return x * (1 - x)

    def feedforward(self, X):
        self.input_layer = np.insert(X, 0, 1, axis=1)
        self.hidden_layer_input = np.dot(self.input_layer, self.weights_input_to_hidden)
        self.hidden_layer_output = self.sigmoid(self.hidden_layer_input)
        self.hidden_layer_output = np.insert(self.hidden_layer_output, 0, 1, axis=1)
        self.output_layer_input = np.dot(self.hidden_layer_output, self.weights_hidden_to_output)
        self.output_layer_output = self.sigmoid(self.output_layer_input)
        return self.output_layer_output

    def backpropagation(self, X, Y, output):
        output_error = Y - output
        output_delta = output_error * self.sigmoid_derivative(output)

        hidden_error = np.dot(output_delta, self.weights_hidden_to_output.T[:, 1:])
        hidden_delta = hidden_error * self.sigmoid_derivative(self.hidden_layer_output[:, 1:])

        self.weights_hidden_to_output += self.learning_rate * np.dot(self.hidden_layer_output.T, output_delta)
        self.weights_input_to_hidden += self.learning_rate * np.dot(self.input_layer.T, hidden_delta)

    def train(self, X_train, Y_train, X_val, Y_val, epochs=1000, early_stopping_rounds=50):
        accuracies = []
        errors = []
        val_accuracies = []
        val_errors = []

        best_val_accuracy = 0
        epochs_no_improve = 0

        for epoch in range(epochs):
            output = self.feedforward(X_train)
            self.backpropagation(X_train, Y_train, output)

            error = np.mean(np.square(Y_train - output))
            errors.append(error)
            accuracy = self.calculate_accuracy(Y_train, output)
            accuracies.append(accuracy)

            val_output = self.feedforward(X_val)
            val_error = np.mean(np.square(Y_val - val_output))
            val_errors.append(val_error)
            val_accuracy = self.calculate_accuracy(Y_val, val_output)
            val_accuracies.append(val_accuracy)

            if val_accuracy > best_val_accuracy:
                best_val_accuracy = val_accuracy
                epochs_no_improve = 0
            else:
                epochs_no_improve += 1

            if epochs_no_improve >= early_stopping_rounds:
                print(f'Early stopping at epoch {epoch}')
                break

        return accuracies, errors, val_accuracies, val_errors

    def predict(self, X):
        output = self.feedforward(X)
        return output

    def calculate_accuracy(self, Y_true, Y_pred):
        correct_predictions = np.sum(Y_true.argmax(axis=1) == Y_pred.argmax(axis=1))
        accuracy = correct_predictions / Y_true.shape[0]
        return accuracy

# Criar o diretório de saída, se não existir
output_dir = 'C:\\Users\\gui02\\Downloads\\EP IA\\IA-main\\arquivos de saida'
if not os.path.exists(output_dir):
    os.makedirs(output_dir)

# Carregar os dados
X, Y = load_data()

# Normalização dos dados
scaler = lambda x: (x - np.mean(x, axis=0)) / np.std(x, axis=0)
X = scaler(X)

# Manter os últimos 130 valores para teste
X_test = X[-130:]
Y_test = Y[-130:]
X_remaining = X[:-130]
Y_remaining = Y[:-130]

# Dividir os dados restantes em treino (60%) e validação (40%) manualmente
def train_test_split_manual(X, Y, test_size):
    n_train = int((1 - test_size) * X.shape[0])
    indices = np.random.permutation(X.shape[0])
    train_indices = indices[:n_train]
    val_indices = indices[n_train:]
    return X[train_indices], X[val_indices], Y[train_indices], Y[val_indices]

X_train, X_val, Y_train, Y_val = train_test_split_manual(X_remaining, Y_remaining, test_size=0.4)

# Configurar validação cruzada
kf = KFold(n_splits=5, shuffle=True, random_state=42)
fold = 1

# Listas para armazenar os resultados de cada fold
all_accuracies = []
all_errors = []
all_val_accuracies = []
all_val_errors = []

for train_index, val_index in kf.split(X_train):
    X_train_fold, X_val_fold = X_train[train_index], X_train[val_index]
    Y_train_fold, Y_val_fold = Y_train[train_index], Y_train[val_index]

    mlp = MLP(input_layer_size=120, hidden_layer_size=20, output_layer_size=26, learning_rate=0.01)
    accuracies, errors, val_accuracies, val_errors = mlp.train(X_train_fold, Y_train_fold, X_val_fold, Y_val_fold, epochs=2000, early_stopping_rounds=50)

    # Armazenar os resultados de cada fold
    all_accuracies.append(accuracies)
    all_errors.append(errors)
    all_val_accuracies.append(val_accuracies)
    all_val_errors.append(val_errors)

    fold += 1

# Treinar o MLP com os dados completos de treinamento e validação
mlp_final = MLP(input_layer_size=120, hidden_layer_size=20, output_layer_size=26, learning_rate=0.01)
mlp_final.train(X_train, Y_train, X_val, Y_val, epochs=2000, early_stopping_rounds=50)

# Fazer previsões no conjunto de teste
test_predictions = mlp_final.predict(X_test)

# Calcular a acurácia no conjunto de teste
test_accuracy = mlp_final.calculate_accuracy(Y_test, test_predictions)
print(f"Acurácia no conjunto de teste: {test_accuracy}")

# Salvar hiperparâmetros
hyperparameters = {
    "input_layer_size": 120,
    "hidden_layer_size": 20,
    "output_layer_size": 26,
    "learning_rate": 0.01,
    "epochs": 2000
}
with open(os.path.join(output_dir, "hyperparameters.txt"), "w") as f:
    for key, value in hyperparameters.items():
        f.write(f"{key}: {value}\n")